# -*- coding: utf-8 -*-
"""Nhom10_Mecung.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yko9dL6wjeGIPXExRxKiR_Afwyv82DOY
"""

# Mecung
r,c = [int(i) for i in input().split()]
matrix = []
for i in range(r):
    matrix.append(list(input()))

# Hàm kiểm tra xem hành động có hợp lệ hay không
def isLegal(action,r,c,matrix):
    if action[0] < 0 or action[1] < 0 or action[0] >= r or action[1] >=c:
        return False
    if matrix[action[0]][action[1]] == '#':
        return False
    return True

# Hàm tìm các hành động hợp lệ
def LegalActions(state, endstate,r,c,matrix):
    # Duyệt qua bốn hành động lên xuống trái phải
    actions = [[state[-1][0]-1, state[-1][1]], [state[-1][0]+1, state[-1][1]], [state[-1][0], state[-1][1]-1], [state[-1][0], state[-1][1]+1]]
    legal_actions = []
    for i in actions:
        # Nếu hành động hợp lệ thìcập nhật cost ở mỗi hành động
        if isLegal(i,r,c,matrix):
            legal_actions.append([Cost(i, endstate)+state[1],state[1]+1,i]) 
    return legal_actions

# Hàm tính Heuristic
def Cost(state, endstate):
    mahatan_distance = abs(endstate[0] - state[0]) + abs(endstate[1] - state[1])
    return mahatan_distance

# Hàm tìm nơi bắt đầu và kết thúc
def getState(r,c,matrix):
    start,end=0,0
    for i in range(r):
        if 's' in matrix[i]:
            start = [i,matrix[i].index('s')]
        if 'e' in matrix[i]:
            end = [i,matrix[i].index('e')]
        if start !=0 and end != 0:
            return start,end

def Find(r,c,matrix):
    frontier, endstate = getState(r,c,matrix) # tìm trạng thái bắt đầu và kết thúc
    frontier = [[r*c,0,frontier]] # frontier có 3 yếu tố: 1 là heuristic, 2 là khoảng cách thực đã đi, 3 là trạng thái hiện tại
    explored_set = [] # tập những trạng thái đã đi qua

    while frontier:
        x = frontier.pop(0)
        # không duyệt lại những trạng thái đã đi qua
        if x[-1] in explored_set:
            continue
        explored_set.append(x[-1])
        if x[-1] == endstate :
            return x[1] # Nếu tìm thấy đường đi ngắn nhất thì trả về kết quả
        # Duyệt các hành động có thể tiếp theo
        for i in LegalActions(x,endstate,r,c,matrix):
            frontier.append(i)
        frontier.sort()
    
    # Nếu không tìm thấy đường đi đến đích thì trả về -1
    return -1

# Tìm và xuất kết quả
x = Find(r,c,matrix)
# Xuất kết quả
print(x)